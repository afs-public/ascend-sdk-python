"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from ascend_sdk import SDK
from ascend_sdk.models import components, operations
import os
from tests.test_client import create_test_http_client


def test_person_management_accounts_list_legal_natural_persons():
    test_http_client = create_test_http_client("Accounts_ListLegalNaturalPersons")

    with SDK(
        server_url=os.getenv("SERVICE_ACCOUNT_CREDS_URL", ""),
        security=components.Security(
            api_key=os.getenv("API_KEY", "value"),
            service_account_creds=components.ServiceAccountCreds(
                private_key=os.getenv("SERVICE_ACCOUNT_CREDS_PRIVATE_KEY", "value"),
                name=os.getenv("SERVICE_ACCOUNT_CREDS_NAME", "value"),
                organization=os.getenv("SERVICE_ACCOUNT_CREDS_ORGANIZATION", "value"),
                type=os.getenv("SERVICE_ACCOUNT_CREDS_TYPE", "value"),
            ),
        ),
        client=test_http_client,
    ) as sdk:
        assert sdk is not None

        res = sdk.person_management.list_legal_natural_persons(
            page_size=25, page_token="", filter_=""
        )
        assert res.http_meta is not None
        assert res.http_meta.response is not None
        assert res.http_meta.response.status_code == 200


def test_person_management_accounts_list_legal_entities():
    test_http_client = create_test_http_client("Accounts_ListLegalEntities")

    with SDK(
        server_url=os.getenv("SERVICE_ACCOUNT_CREDS_URL", ""),
        security=components.Security(
            api_key=os.getenv("API_KEY", "value"),
            service_account_creds=components.ServiceAccountCreds(
                private_key=os.getenv("SERVICE_ACCOUNT_CREDS_PRIVATE_KEY", "value"),
                name=os.getenv("SERVICE_ACCOUNT_CREDS_NAME", "value"),
                organization=os.getenv("SERVICE_ACCOUNT_CREDS_ORGANIZATION", "value"),
                type=os.getenv("SERVICE_ACCOUNT_CREDS_TYPE", "value"),
            ),
        ),
        client=test_http_client,
    ) as sdk:
        assert sdk is not None

        res = sdk.person_management.list_legal_entities(
            page_size=25, page_token="", order_by="", filter_=""
        )
        assert res.http_meta is not None
        assert res.http_meta.response is not None
        assert res.http_meta.response.status_code == 200


def test_person_management_accounts_list_accounts():
    test_http_client = create_test_http_client("Accounts_ListAccounts")

    with SDK(
        server_url=os.getenv("SERVICE_ACCOUNT_CREDS_URL", ""),
        security=components.Security(
            api_key=os.getenv("API_KEY", "value"),
            service_account_creds=components.ServiceAccountCreds(
                private_key=os.getenv("SERVICE_ACCOUNT_CREDS_PRIVATE_KEY", "value"),
                name=os.getenv("SERVICE_ACCOUNT_CREDS_NAME", "value"),
                organization=os.getenv("SERVICE_ACCOUNT_CREDS_ORGANIZATION", "value"),
                type=os.getenv("SERVICE_ACCOUNT_CREDS_TYPE", "value"),
            ),
        ),
        client=test_http_client,
    ) as sdk:
        assert sdk is not None

        res = sdk.account_management.list_accounts(
            request={
                "page_size": 25,
                "page_token": "",
                "order_by": "",
                "filter_": "",
                "view": operations.View.BASIC,
            }
        )
        assert res.http_meta is not None
        assert res.http_meta.response is not None
        assert res.http_meta.response.status_code == 200
